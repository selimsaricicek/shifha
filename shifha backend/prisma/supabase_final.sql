-- =====================================================
-- SHIFHA SUPABASE SQL - COMPLETE VERSION (TÜM TABLOLAR)
-- =====================================================

-- NOT: Bu dosya tüm tabloları güvenli bir şekilde oluşturur
-- Mevcut tablolar zaten varsa bu komutlar hata vermez

-- =====================================================
-- 0. TEMİZLİK İŞLEMLERİ (DUPLICATE TABLOLAR)
-- =====================================================

-- Eğer "Patient" (PascalCase) tablosu varsa sil (yanlış isimlendirme)
DO $$ 
BEGIN
    IF EXISTS (SELECT FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Patient') THEN
        DROP TABLE public."Patient" CASCADE;
        RAISE NOTICE 'Patient (PascalCase) tablosu silindi - yanlış isimlendirme';
    END IF;
END $$;

-- Eğer "BloodTestAnalysis" (PascalCase) tablosu varsa sil (yanlış isimlendirme)
DO $$ 
BEGIN
    IF EXISTS (SELECT FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'BloodTestAnalysis') THEN
        DROP TABLE public."BloodTestAnalysis" CASCADE;
        RAISE NOTICE 'BloodTestAnalysis (PascalCase) tablosu silindi - yanlış isimlendirme';
    END IF;
END $$;

-- =====================================================
-- 1. PROFILES TABLOSU KONTROLÜ VE GÜNCELLEME
-- =====================================================

-- Eğer profiles tablosu yoksa oluştur (varsa hata vermez)
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'profiles') THEN
        CREATE TABLE public.profiles (
            id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
            name TEXT,
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
        
        -- Enable RLS for profiles
        ALTER TABLE public.profiles ENABLE ROW LEVKENEUOLÜ VE GÜNCELLERETY;
        
        -- Policy to allow users to manage thei-- Patients tablosu kontrolü
DO $$ 
BEGIN
    IF NOT EXISTS (SELErT FROM information_schema.tables WHE o table_schema = 'public' wND table_name = 'patients') nH N
   p    CREArE Tofile
        CREATE PO       LICY  "Users can manage their own profile" ON public.profil       es
         FOR ALL TO authenticated 
        USING (auth.uid()         = id)
        WITH CHECK (auth.uid() = id);
        
        RAISE NOTICE 'Pr        ofiles tablosu oluşturuldu';
    ELSE
        RAISE NOTICE 'Pr ofil       es tablosu zaten mevcut';
    END IF;
END $$;

-- ==============  ====      ===================  ====      ============
-- 2. PATIENTS TABLOSU KONTROLÜ VE GÜNCELLEME
--    ====     =================================================

-- Pat    ient    s tablosu kontrolü
DO $$ 
BEGIN
    IF NOT EXISTS (SELEC     T FR   OM information_schema.tables WHERE table_schema = 'public' AND ta     ble_   name = 'patients') THEN
        CREATE TABLE public.patients (
                    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
                    tc_kimlik_no CHARACTER VARYING NOT NULL DEFAULT         ''::CHARACTER VARYING,
            ad_s oyad        CHARACTER VARYING NULL DEFAULT ''::CHAR  ACTE      R VARYING,
            dogum_tarihi CHAR   ACTE     R VARYING NULL DEFAULT ''::CHARACTER VARYIN    G,
                yas INTEGER NULL,
                cin    siyet CHARACTER VARYING NULL DEFAULT ''::CH     ARAC   TER VARYING,
            boy CHARACTER VARYI      NG N  ULL DEFAULT ''::CHARACTER VARYING,
            vki CHARACTER V       ARYI NG NULL DEFAULT ''::CHARACTER VARYING,
            kan_grub       u CH ARACTER VARYING NULL DEFAULT ''::CHARACTER VARYING,
            med        eni_durum CHARACTER VARYING NULL DEFAULT '        '::CHARACTER VARYING,
            meslek CHARACTER VARYING NULL  DEFA       ULT ''::CHARACTER VARYING,
            egitim_durumu CHARACTER VARYIN  G NU      LL DEFAULT ''::CHARACTER VARYING,
            kronik_hastaliklar TEX  T NU      LL DEFAULT ''::TEXT,
            ameliyatlar TEXT NULL DEFAULT ''::        TEXT,
            allerjiler TEXT         NULL DEFAULT ''::TEXT,
                    aile_oykusu TEXT NULL DEFAULT ''::TEXT,
                    enfeksiyonlar TEXT         NU        LL DEFAULT ''::TEXT,
            ilac_duze;
    ELSE
        RAISE NOTICE 'Patients tablosu zaten mevcut';
    END IF;
END $$nli TEXT NULL DEFAULT ''::TEXT,
            ilac_duzensiz TEXT NULL DEFAULT ''::TEXT,
            ilac_alternatif TEXT NULL DEFAULT ''::TEXT,
            hareket CHARACTER VARYING NULL DEFAULT ''::CHARACTER VARYING,
            uyku CHARACTER VARYING NULL DEFAULT ''::CHARACTER VARYING,
            sigara_alkol CHARACTER VARYING NULL DEFAULT ''::CHARACTER VARYING,
            beslenme CHARACTER VARYING NULL,
            psikoloji CHARACTER VARYING NULL DEFAULT ''::CHARACTER VARYING,
            uyku_bozuklugu CHARACTER VARYING NULL DEFAULT ''::CHARACTER VARYING,
            sosyal_destek CHARACTER VARYING NULL DEFAULT ''::CHARACTER VARYING,
            updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
            kilo CHARACTER VARYING NULL,
            patient_data JSONB NULL,
            CONSTRAINT patients_pkey PRIMARY KEY (tc_kimlik_no)
        ) TABLESPACE pg_default;
        
        RAISE NOTICE 'Patients tablosu oluşturuldu';
    ELSE
        RAISE NOTICE 'Patients tablosu zaten mevcut';
    END IF;
END $$;

-- =====================================================
-- 3. CITIES TABLOSU KONTROLÜ VE GÜNCELLEME
-- =====================================================

-- Cities tablosu kontrolü
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'cities') THEN
        CREATE TABLE public.cities (
            id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
            name TEXT NOT NULL UNIQUE,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
        
        -- Enable RLS
        ALTER TABLE public.cities ENABLE ROW LEVEL SECURITY;
        
        -- Policy to allow all users to view cities
        CREATE POLICY "Cities are viewable by all" ON public.cities
        FOR SELECT TO authenticated USING (true);
        
        RAISE NOTICE 'Cities tablosu oluşturuldu';
    ELSE
        RAISE NOTICE 'Cities tablosu zaten mevcut';
    END IF;
END $$;

-- =====================================================
-- 4. DISTRICTS TABLOSU KONTROLÜ VE GÜNCELLEME
-- =====================================================

-- Districts tablosu kontrolü
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'districts') THEN
        CREATE TABLE public.districts (
            id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
            city_id BIGINT NOT NULL REFERENCES public.cities(id),
            name TEXT NOT NULL,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            UNIQUE(city_id, name)
        );
        
        -- Create index for foreign key
        CREATE INDEX idx_districts_city_id ON public.districts(city_id);
        
        -- Enable RLS
        ALTER TABLE public.districts ENABLE ROW LEVEL SECURITY;
        
        -- Policy to allow all users to view districts
        CREATE POLICY "Districts are viewable by all" ON public.districts
        FOR SELECT TO authenticated USING (true);
        
        RAISE NOTICE 'Districts tablosu oluşturuldu';
    ELSE
        RAISE NOTICE 'Districts tablosu zaten mevcut';
    END IF;
END $$;

-- =====================================================
-- 5. HOSPITALS TABLOSU KONTROLÜ VE GÜNCELLEME
-- =====================================================

-- Hospitals tablosu kontrolü
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'hospitals') THEN
        CREATE TABLE public.hospitals (
            id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
            district_id BIGINT NOT NULL REFERENCES public.districts(id),
            name TEXT NOT NULL,
            address TEXT,
            phone TEXT,
            email TEXT,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            UNIQUE(district_id, name)
        );
        
        -- Create index for foreign key
        CREATE INDEX idx_hospitals_district_id ON public.hospitals(district_id);
        
        -- Enable RLS
        ALTER TABLE public.hospitals ENABLE ROW LEVEL SECURITY;
        
        -- Policy to allow all users to view hospitals
        CREATE POLICY "Hospitals are viewable by all" ON public.hospitals
        FOR SELECT TO authenticated USING (true);
        
        RAISE NOTICE 'Hospitals tablosu oluşturuldu';
    ELSE
        RAISE NOTICE 'Hospitals tablosu zaten mevcut';
    END IF;
END $$;

-- =====================================================
-- 6. DOCTOR_PROFILES TABLOSU KONTROLÜ VE GÜNCELLEME
-- =====================================================

-- Doctor_profiles tablosu kontrolü
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'doctor_profiles') THEN
        CREATE TABLE public.doctor_profiles (
            id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
            user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
            hospital_id BIGINT NULL REFERENCES public.hospitals(id),
            tc_kimlik_no TEXT NOT NULL UNIQUE,
            full_name TEXT NOT NULL,
            email TEXT,
            phone TEXT,
            specialization TEXT,
            department TEXT,
            is_active BOOLEAN DEFAULT TRUE,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
        
        -- Create indexes
        CREATE INDEX idx_doctor_profiles_user_id ON public.doctor_profiles(user_id);
        CREATE INDEX idx_doctor_profiles_hospital_id ON public.doctor_profiles(hospital_id);
        
        -- Enable RLS
        ALTER TABLE public.doctor_profiles ENABLE ROW LEVEL SECURITY;
        
        -- Policy for doctors to manage their own profile
        CREATE POLICY "Doctors can manage their own profile" ON public.doctor_profiles
        FOR ALL TO authenticated 
        USING (auth.uid() = user_id)
        WITH CHECK (auth.uid() = user_id);
        
        -- Policy for admin to view all doctor profiles
        CREATE POLICY "Admins can view all doctor profiles" ON public.doctor_profiles
        FOR SELECT TO authenticated 
        USING ((SELECT auth.jwt() ->> 'role') = 'admin');
        
        RAISE NOTICE 'Doctor_profiles tablosu oluşturuldu';
    ELSE
        RAISE NOTICE 'Doctor_profiles tablosu zaten mevcut';
        
        -- Mevcut tabloda hospital_id alanını opsiyonel yap
        IF EXISTS (
            SELECT FROM information_schema.columns 
            WHERE table_schema = 'public' 
            AND table_name = 'doctor_profiles' 
            AND column_name = 'hospital_id'
            AND is_nullable = 'NO'
        ) THEN
            ALTER TABLE public.doctor_profiles ALTER COLUMN hospital_id DROP NOT NULL;
            RAISE NOTICE 'Doctor_profiles.hospital_id alanı opsiyonel yapıldı';
        ELSE
            RAISE NOTICE 'Doctor_profiles.hospital_id alanı zaten opsiyonel';
        END IF;
    END IF;
END $$;

-- =====================================================
-- 7. PATIENT_PROFILES TABLOSU KONTROLÜ VE GÜNCELLEME
-- =====================================================

-- Patient_profiles tablosu kontrolü
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'patient_profiles') THEN
        CREATE TABLE public.patient_profiles (
            id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
            user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
            tc_kimlik_no TEXT NOT NULL UNIQUE,
            full_name TEXT NOT NULL,
            email TEXT,
            phone TEXT,
            birth_date DATE,
            gender TEXT,
            address TEXT,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
        
        -- Create index for user_id
        CREATE INDEX idx_patient_profiles_user_id ON public.patient_profiles(user_id);
        
        -- Enable RLS
        ALTER TABLE public.patient_profiles ENABLE ROW LEVEL SECURITY;
        
        -- Policy to allow users to view and edit only their own profile
        CREATE POLICY "Users can manage their own profile" ON public.patient_profiles
        FOR ALL TO authenticated 
        USING (auth.uid() = user_id)
        WITH CHECK (auth.uid() = user_id);
        
        RAISE NOTICE 'Patient_profiles tablosu oluşturuldu';
    ELSE
        RAISE NOTICE 'Patient_profiles tablosu zaten mevcut';
    END IF;
END $$;

-- =====================================================
-- 8. APPOINTMENTS TABLOSU KONTROLÜ VE GÜNCELLEME
-- =====================================================

-- Appointment_status enum kontrolü
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT FROM pg_type WHERE typname = 'appointment_status') THEN
        CREATE TYPE appointment_status AS ENUM ('pending', 'confirmed', 'cancelled', 'completed');
        RAISE NOTICE 'Appointment_status enum oluşturuldu';
    ELSE
        RAISE NOTICE 'Appointment_status enum zaten mevcut';
    END IF;
END $$;

-- Appointments tablosu kontrolü
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'appointments') THEN
        CREATE TABLE public.appointments (
            id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
            patient_id BIGINT NOT NULL REFERENCES public.patient_profiles(id),
            doctor_id BIGINT NOT NULL REFERENCES public.doctor_profiles(id),
            hospital_id BIGINT NOT NULL REFERENCES public.hospitals(id),
            appointment_date DATE NOT NULL,
            appointment_time TIME NOT NULL,
            status appointment_status DEFAULT 'pending',
            notes TEXT,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            UNIQUE(doctor_id, appointment_date, appointment_time)
        );
        
        -- Create indexes
        CREATE INDEX idx_appointments_patient_id ON public.appointments(patient_id);
        CREATE INDEX idx_appointments_doctor_id ON public.appointments(doctor_id);
        CREATE INDEX idx_appointments_hospital_id ON public.appointments(hospital_id);
        
        -- Enable RLS
        ALTER TABLE public.appointments ENABLE ROW LEVEL SECURITY;
        
        -- Policy for patients to view and manage their own appointments
        CREATE POLICY "Patients can manage their own appointments" ON public.appointments
        FOR ALL TO authenticated 
        USING (patient_id = (SELECT id FROM public.patient_profiles WHERE user_id = auth.uid()))
        WITH CHECK (patient_id = (SELECT id FROM public.patient_profiles WHERE user_id = auth.uid()));
        
        -- Policy for doctors to view their appointments
        CREATE POLICY "Doctors can view their appointments" ON public.appointments
        FOR SELECT TO authenticated 
        USING (doctor_id = (SELECT id FROM public.doctor_profiles WHERE user_id = auth.uid()));
        
        -- Policy for admins to manage all appointments
        CREATE POLICY "Admins can manage all appointments" ON public.appointments
        FOR ALL TO authenticated 
        USING ((SELECT auth.jwt() ->> 'role') = 'admin')
        WITH CHECK ((SELECT auth.jwt() ->> 'role') = 'admin');
        
        RAISE NOTICE 'Appointments tablosu oluşturuldu';
    ELSE
        RAISE NOTICE 'Appointments tablosu zaten mevcut';
    END IF;
END $$;

-- =====================================================
-- 9. BLOOD_TEST_ANALYSIS TABLOSU KONTROLÜ VE GÜNCELLEME
-- =====================================================

-- BloodTestAnalysis tablosu kontrolü
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'blood_test_analysis') THEN
        CREATE TABLE public.blood_test_analysis (
            id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
            user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
            patient_tc_kimlik_no CHARACTER VARYING NOT NULL REFERENCES public.patients(tc_kimlik_no) ON DELETE CASCADE,
            results TEXT,
            gemini_response TEXT,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
        
        -- Create index for blood test analysis
        CREATE INDEX idx_blood_test_analysis_user_id ON public.blood_test_analysis(user_id);
        CREATE INDEX idx_blood_test_analysis_patient_tc ON public.blood_test_analysis(patient_tc_kimlik_no);
        
        -- Enable RLS
        ALTER TABLE public.blood_test_analysis ENABLE ROW LEVEL SECURITY;
        
        -- Policy for users to manage their own blood test analysis
        CREATE POLICY "Users can manage their own blood test analysis" ON public.blood_test_analysis
        FOR ALL TO authenticated 
        USING (auth.uid() = user_id)
        WITH CHECK (auth.uid() = user_id);
        
        RAISE NOTICE 'BloodTestAnalysis tablosu oluşturuldu';
    ELSE
        RAISE NOTICE 'BloodTestAnalysis tablosu zaten mevcut';
    END IF;
END $$;

-- =====================================================
-- 10. MEVCUT TABLOLARIN RLS KONTROLÜ
-- =====================================================

-- Patients tablosu RLS kontrolü
DO $$ 
BEGIN
    IF NOT EXISTS (
        SELECT FROM pg_policies 
        WHERE tablename = 'patients' 
        AND schemaname = 'public'
    ) THEN
        ALTER TABLE public.patients ENABLE ROW LEVEL SECURITY;
        
        -- Policy for patients (basit bir policy)
        CREATE POLICY "Patients are viewable by authenticated users" ON public.patients
        FOR SELECT TO authenticated USING (true);
        
        CREATE POLICY "Patients can be managed by authenticated users" ON public.patients
        FOR ALL TO authenticated USING (true) WITH CHECK (true);
        
        RAISE NOTICE 'Patients tablosu için RLS policy eklendi';
    ELSE
        RAISE NOTICE 'Patients tablosu için RLS policy zaten mevcut';
    END IF;
END $$;

-- =====================================================
-- 11. TEST VERİLERİ (İSTEĞE BAĞLI)
-- =====================================================

-- Test için örnek şehir ekle (eğer yoksa)
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT FROM public.cities WHERE name = 'İstanbul') THEN
        INSERT INTO public.cities (name) VALUES ('İstanbul');
        RAISE NOTICE 'Test şehri eklendi: İstanbul';
    END IF;
    
    IF NOT EXISTS (SELECT FROM public.cities WHERE name = 'Ankara') THEN
        INSERT INTO public.cities (name) VALUES ('Ankara');
        RAISE NOTICE 'Test şehri eklendi: Ankara';
    END IF;
    
    IF NOT EXISTS (SELECT FROM public.cities WHERE name = 'İzmir') THEN
        INSERT INTO public.cities (name) VALUES ('İzmir');
        RAISE NOTICE 'Test şehri eklendi: İzmir';
    END IF;
END $$;

-- =====================================================
-- 12. VERİTABANI DURUMU KONTROLÜ
-- =====================================================

-- Mevcut tabloları listele
SELECT 
    table_name,
    CASE 
        WHEN table_name IN ('profiles', 'doctor_profiles', 'patients', 'blood_test_analysis', 'cities', 'districts', 'hospitals', 'patient_profiles', 'appointments') 
        THEN '✅ Gerekli Tablo'
        ELSE '📋 Diğer Tablo'
    END as status
FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_type = 'BASE TABLE'
ORDER BY table_name;

-- =====================================================
-- 13. KAYIT SİSTEMİ İÇİN GEREKLİ KONTROLLER
-- =====================================================

-- Profiles tablosu yapısını kontrol et
SELECT 
    column_name,
    data_type,
    is_nullable,
    column_default
FROM information_schema.columns 
WHERE table_schema = 'public' 
AND table_name = 'profiles'
ORDER BY ordinal_position;

-- Doctor_profiles tablosu yapısını kontrol et
SELECT 
    column_name,
    data_type,
    is_nullable,
    column_default
FROM information_schema.columns 
WHERE table_schema = 'public' 
AND table_name = 'doctor_profiles'
ORDER BY ordinal_position;

-- =====================================================
-- 14. DETAYLI KAN TAHLİLİ TABLOSU
-- =====================================================

-- Kan tahlili sonuçları için detaylı tablo
DO $$ 
BEGIN
    IF NOT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'blood_test_results'
    ) THEN
        CREATE TABLE public.blood_test_results (
            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
            patient_tc VARCHAR(11) NOT NULL,
            test_date DATE NOT NULL DEFAULT CURRENT_DATE,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            
            -- Hemogram Değerleri
            hemoglobin DECIMAL(5,2), -- g/dL (12.0-15.5 K, 13.5-17.5 E)
            hematokrit DECIMAL(5,2), -- % (36-46 K, 41-53 E)
            eritrosit DECIMAL(5,2), -- milyon/μL (4.2-5.4 K, 4.7-6.1 E)
            lökosit DECIMAL(6,2), -- bin/μL (4.5-11.0)
            trombosit INTEGER, -- bin/μL (150-450)
            mcv DECIMAL(5,2), -- fL (80-100)
            mch DECIMAL(5,2), -- pg (27-32)
            mchc DECIMAL(5,2), -- g/dL (32-36)
            rdw DECIMAL(5,2), -- % (11.5-14.5)
            
            -- Biyokimya Değerleri
            glukoz DECIMAL(6,2), -- mg/dL (70-100 açlık)
            üre DECIMAL(6,2), -- mg/dL (17-43)
            kreatinin DECIMAL(5,2), -- mg/dL (0.7-1.2 E, 0.6-1.1 K)
            egfr DECIMAL(6,2), -- mL/dk/1.73m² (>90)
            ürik_asit DECIMAL(5,2), -- mg/dL (3.5-7.2 E, 2.6-6.0 K)
            total_kolesterol DECIMAL(6,2), -- mg/dL (<200)
            hdl_kolesterol DECIMAL(6,2), -- mg/dL (>40 E, >50 K)
            ldl_kolesterol DECIMAL(6,2), -- mg/dL (<100)
            trigliserit DECIMAL(6,2), -- mg/dL (<150)
            
            -- Karaciğer Fonksiyonları
            alt_sgpt DECIMAL(6,2), -- U/L (7-56)
            ast_sgot DECIMAL(6,2), -- U/L (10-40)
            alp DECIMAL(6,2), -- U/L (44-147)
            ggt DECIMAL(6,2), -- U/L (9-48 E, 9-32 K)
            total_bilirubin DECIMAL(5,2), -- mg/dL (0.3-1.2)
            direkt_bilirubin DECIMAL(5,2), -- mg/dL (0.0-0.3)
            
            -- Protein Değerleri
            total_protein DECIMAL(5,2), -- g/dL (6.3-8.2)
            albumin DECIMAL(5,2), -- g/dL (3.5-5.2)
            
            -- Elektrolit Değerleri
            sodyum DECIMAL(6,2), -- mEq/L (136-145)
            potasyum DECIMAL(5,2), -- mEq/L (3.5-5.1)
            klor DECIMAL(6,2), -- mEq/L (98-107)
            kalsiyum DECIMAL(5,2), -- mg/dL (8.5-10.5)
            fosfor DECIMAL(5,2), -- mg/dL (2.5-4.5)
            magnezyum DECIMAL(5,2), -- mg/dL (1.7-2.2)
            
            -- Tiroid Fonksiyonları
            tsh DECIMAL(6,3), -- mIU/L (0.27-4.2)
            t3 DECIMAL(5,2), -- pg/mL (2.0-4.4)
            t4 DECIMAL(5,2), -- ng/dL (5.1-14.1)
            
            -- Vitamin Değerleri
            vitamin_b12 DECIMAL(6,2), -- pg/mL (197-771)
            vitamin_d DECIMAL(5,2), -- ng/mL (30-100)
            folik_asit DECIMAL(5,2), -- ng/mL (4.6-18.7)
            
            -- İnflamasyon Belirteçleri
            crp DECIMAL(6,2), -- mg/L (<3.0)
            sedimentasyon INTEGER, -- mm/saat (0-20 E, 0-30 K)
            
            -- Demir Metabolizması
            demir DECIMAL(6,2), -- μg/dL (60-170 E, 37-145 K)
            tibc DECIMAL(6,2), -- μg/dL (250-450)
            ferritin DECIMAL(6,2), -- ng/mL (12-300 E, 12-150 K)
            
            -- Hormon Değerleri
            insulin DECIMAL(6,2), -- μIU/mL (2.6-24.9)
            hba1c DECIMAL(5,2), -- % (<5.7)
            
            -- Kardiyak Belirteçler
            troponin_i DECIMAL(8,3), -- ng/mL (<0.04)
            ck_mb DECIMAL(6,2), -- ng/mL (<6.3)

            -- Viral Belirteçler
            hbsag VARCHAR(20),
            anti_hcv VARCHAR(20),
            
            -- İdrar Değerleri
            idrar_protein VARCHAR(20), -- negatif/pozitif
            idrar_glukoz VARCHAR(20), -- negatif/pozitif
            idrar_keton VARCHAR(20), -- negatif/pozitif
            idrar_lökosit VARCHAR(20), -- /hpf
            idrar_eritrosit VARCHAR(20), -- /hpf
            
            -- Ek Notlar
            notes TEXT,
            
            CONSTRAINT fk_blood_test_patient 
                FOREIGN KEY (patient_tc) 
                REFERENCES patients(tc_kimlik_no) 
                ON DELETE CASCADE
        );
        
        -- İndeksler
        CREATE INDEX idx_blood_test_patient_tc ON public.blood_test_results(patient_tc);
        CREATE INDEX idx_blood_test_date ON public.blood_test_results(test_date);
        CREATE INDEX idx_blood_test_created ON public.blood_test_results(created_at);
        
        -- RLS Politikaları
        ALTER TABLE public.blood_test_results ENABLE ROW LEVEL SECURITY;
        
        CREATE POLICY "Blood test results are viewable by authenticated users" 
            ON public.blood_test_results
            FOR SELECT TO authenticated 
            USING (true);
            
        CREATE POLICY "Blood test results can be managed by authenticated users" 
            ON public.blood_test_results
            FOR ALL TO authenticated 
            USING (true) WITH CHECK (true);
        
        RAISE NOTICE '✅ Blood test results tablosu oluşturuldu';
    ELSE
        RAISE NOTICE 'Blood test results tablosu zaten mevcut';
    END IF;
END $$;

-- =====================================================
-- BAŞARI MESAJI
-- =====================================================

DO $$ 
BEGIN
    RAISE NOTICE '========================================';
    RAISE NOTICE 'SHIFHA VERİTABANI KURULUMU TAMAMLANDI!';
    RAISE NOTICE '========================================';
    RAISE NOTICE '✅ Duplicate tablolar temizlendi';
    RAISE NOTICE '✅ Profiles tablosu hazır';
    RAISE NOTICE '✅ Doctor_profiles tablosu hazır';
    RAISE NOTICE '✅ Patients tablosu hazır (snake_case)';
    RAISE NOTICE '✅ Cities tablosu hazır';
    RAISE NOTICE '✅ Districts tablosu hazır';
    RAISE NOTICE '✅ Hospitals tablosu hazır';
    RAISE NOTICE '✅ Patient_profiles tablosu hazır';
    RAISE NOTICE '✅ Appointments tablosu hazır';
    RAISE NOTICE '✅ BloodTestAnalysis tablosu hazır (snake_case)';
    RAISE NOTICE '✅ Blood test results tablosu hazır';
    RAISE NOTICE '✅ RLS policies aktif';
    RAISE NOTICE '✅ Kayıt sistemi için hazır';
    RAISE NOTICE '========================================';
END $$;

